// This file was generated by `tools/generate-bindings.ts`. DO NOT MODIFY!
//
// Copyright (c) 2010-present Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

#ifndef SCRIPT_JAVASCRIPT_MODULES_H_
#define SCRIPT_JAVASCRIPT_MODULES_H_

#include "Common/TypeInfo.h"
#include "Audio/Mixer.h"
#include "Graphics/Animation.h"
#include "Graphics/FontAtlas.h"
#include "Graphics/Label.h"
#include "Graphics/RenderQueue.h"
#include "Graphics/Sprite.h"
#include "Graphics/SpriteBatch.h"
#include "Graphics/TextureAtlas.h"
#include "Input/Controller.h"
#include "Input/Input.h"
#include "Input/VirtualKey.h"
#include <Rainbow/AnimationEvent.h>
#include <Rainbow/TextAlignment.h>
#include "Script/JavaScript/Helper.h"

#ifdef __GNUC__
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wunused-variable"
#endif

// clang-format off

template <>
void rainbow::duk::register_module<rainbow::Animation>(duk_context* ctx, duk_idx_t rainbow)
{
    duk::push_constructor<Animation, SpriteRef, Animation::Frames, uint32_t, int>(ctx);
    duk::put_prototype<Animation, Allocation::HeapAllocated>(ctx, [](duk_context* ctx) {
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto result = obj->current_frame();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "currentFrame");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto result = obj->frame_rate();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "frameRate");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto result = obj->sprite();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "sprite");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto args = duk::get_args<Animation::Callback>(ctx);
                obj->set_callback(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setCallback");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto args = duk::get_args<int>(ctx);
                obj->set_delay(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setDelay");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto args = duk::get_args<uint32_t>(ctx);
                obj->set_frame_rate(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setFrameRate");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto args = duk::get_args<Animation::Frames>(ctx);
                obj->set_frames(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setFrames");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto args = duk::get_args<SpriteRef>(ctx);
                obj->set_sprite(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setSprite");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                auto args = duk::get_args<uint32_t>(ctx);
                obj->jump_to(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "jumpTo");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                obj->rewind();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "rewind");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                obj->start();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "start");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Animation>(ctx);
                obj->stop();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "stop");
        duk::push_literal(ctx, "Rainbow.Animation");
        duk::put_prop_literal(ctx, -2, DUKR_WELLKNOWN_SYMBOL_TOSTRINGTAG);
    });
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "Animation");
}

template <>
void rainbow::duk::register_module<rainbow::AnimationEvent>(duk_context* ctx, duk_idx_t rainbow)
{
    const auto obj_idx = duk_push_bare_object(ctx);
    duk_push_int(ctx, static_cast<int>(AnimationEvent::Start));
    duk::put_prop_literal(ctx, obj_idx, "Start");
    duk_push_int(ctx, static_cast<int>(AnimationEvent::End));
    duk::put_prop_literal(ctx, obj_idx, "End");
    duk_push_int(ctx, static_cast<int>(AnimationEvent::Complete));
    duk::put_prop_literal(ctx, obj_idx, "Complete");
    duk_push_int(ctx, static_cast<int>(AnimationEvent::Frame));
    duk::put_prop_literal(ctx, obj_idx, "Frame");
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "AnimationEvent");
}

template <>
void rainbow::duk::register_module<rainbow::ControllerAxis>(duk_context* ctx, duk_idx_t rainbow)
{
    const auto obj_idx = duk_push_bare_object(ctx);
    duk_push_int(ctx, static_cast<int>(ControllerAxis::Invalid));
    duk::put_prop_literal(ctx, obj_idx, "Invalid");
    duk_push_int(ctx, static_cast<int>(ControllerAxis::LeftX));
    duk::put_prop_literal(ctx, obj_idx, "LeftX");
    duk_push_int(ctx, static_cast<int>(ControllerAxis::LeftY));
    duk::put_prop_literal(ctx, obj_idx, "LeftY");
    duk_push_int(ctx, static_cast<int>(ControllerAxis::RightX));
    duk::put_prop_literal(ctx, obj_idx, "RightX");
    duk_push_int(ctx, static_cast<int>(ControllerAxis::RightY));
    duk::put_prop_literal(ctx, obj_idx, "RightY");
    duk_push_int(ctx, static_cast<int>(ControllerAxis::TriggerLeft));
    duk::put_prop_literal(ctx, obj_idx, "TriggerLeft");
    duk_push_int(ctx, static_cast<int>(ControllerAxis::TriggerRight));
    duk::put_prop_literal(ctx, obj_idx, "TriggerRight");
    duk_push_int(ctx, static_cast<int>(ControllerAxis::Count));
    duk::put_prop_literal(ctx, obj_idx, "Count");
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "ControllerAxis");
}

template <>
void rainbow::duk::register_module<rainbow::ControllerButton>(duk_context* ctx, duk_idx_t rainbow)
{
    const auto obj_idx = duk_push_bare_object(ctx);
    duk_push_int(ctx, static_cast<int>(ControllerButton::Invalid));
    duk::put_prop_literal(ctx, obj_idx, "Invalid");
    duk_push_int(ctx, static_cast<int>(ControllerButton::A));
    duk::put_prop_literal(ctx, obj_idx, "A");
    duk_push_int(ctx, static_cast<int>(ControllerButton::B));
    duk::put_prop_literal(ctx, obj_idx, "B");
    duk_push_int(ctx, static_cast<int>(ControllerButton::X));
    duk::put_prop_literal(ctx, obj_idx, "X");
    duk_push_int(ctx, static_cast<int>(ControllerButton::Y));
    duk::put_prop_literal(ctx, obj_idx, "Y");
    duk_push_int(ctx, static_cast<int>(ControllerButton::Back));
    duk::put_prop_literal(ctx, obj_idx, "Back");
    duk_push_int(ctx, static_cast<int>(ControllerButton::Guide));
    duk::put_prop_literal(ctx, obj_idx, "Guide");
    duk_push_int(ctx, static_cast<int>(ControllerButton::Start));
    duk::put_prop_literal(ctx, obj_idx, "Start");
    duk_push_int(ctx, static_cast<int>(ControllerButton::LeftStick));
    duk::put_prop_literal(ctx, obj_idx, "LeftStick");
    duk_push_int(ctx, static_cast<int>(ControllerButton::RightStick));
    duk::put_prop_literal(ctx, obj_idx, "RightStick");
    duk_push_int(ctx, static_cast<int>(ControllerButton::LeftShoulder));
    duk::put_prop_literal(ctx, obj_idx, "LeftShoulder");
    duk_push_int(ctx, static_cast<int>(ControllerButton::RightShoulder));
    duk::put_prop_literal(ctx, obj_idx, "RightShoulder");
    duk_push_int(ctx, static_cast<int>(ControllerButton::DPadUp));
    duk::put_prop_literal(ctx, obj_idx, "DPadUp");
    duk_push_int(ctx, static_cast<int>(ControllerButton::DPadDown));
    duk::put_prop_literal(ctx, obj_idx, "DPadDown");
    duk_push_int(ctx, static_cast<int>(ControllerButton::DPadLeft));
    duk::put_prop_literal(ctx, obj_idx, "DPadLeft");
    duk_push_int(ctx, static_cast<int>(ControllerButton::DPadRight));
    duk::put_prop_literal(ctx, obj_idx, "DPadRight");
    duk_push_int(ctx, static_cast<int>(ControllerButton::Count));
    duk::put_prop_literal(ctx, obj_idx, "Count");
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "ControllerButton");
}

template <>
void rainbow::duk::register_module<rainbow::SharedPtr<rainbow::FontAtlas>>(duk_context* ctx, duk_idx_t rainbow)
{
    duk::push_constructor<SharedPtr<rainbow::FontAtlas>, czstring, float>(ctx);
    duk::put_prototype<SharedPtr<rainbow::FontAtlas>, Allocation::HeapAllocated>(ctx, [](duk_context* ctx) {
        duk::push_literal(ctx, "Rainbow.Font");
        duk::put_prop_literal(ctx, -2, DUKR_WELLKNOWN_SYMBOL_TOSTRINGTAG);
    });
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "Font");
}

template <>
void rainbow::duk::register_module<rainbow::Label>(duk_context* ctx, duk_idx_t rainbow)
{
    duk::push_constructor<Label>(ctx);
    duk::put_prototype<Label, Allocation::HeapAllocated>(ctx, [](duk_context* ctx) {
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->alignment();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "alignment");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->angle();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "angle");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->color();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "color");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->length();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "length");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->position();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "position");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->scale();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "scale");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->text();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "text");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto result = obj->width();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "width");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<TextAlignment>(ctx);
                obj->set_alignment(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setAlignment");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<Color>(ctx);
                obj->set_color(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setColor");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<SharedPtr<FontAtlas>>(ctx);
                obj->set_font(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setFont");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<Vec2f>(ctx);
                obj->set_position(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setPosition");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<float>(ctx);
                obj->set_rotation(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setRotation");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<float>(ctx);
                obj->set_scale(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setScale");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<czstring>(ctx);
                obj->set_text(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setText");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<Label>(ctx);
                auto args = duk::get_args<Vec2f>(ctx);
                obj->move(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "move");
        duk::push_literal(ctx, "Rainbow.Label");
        duk::put_prop_literal(ctx, -2, DUKR_WELLKNOWN_SYMBOL_TOSTRINGTAG);
    });
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "Label");
}

template <>
void rainbow::duk::register_module<rainbow::SpriteRef>(duk_context* ctx, duk_idx_t rainbow)
{
    duk_push_bare_object(ctx);
    duk::put_prototype<SpriteRef, Allocation::NoHeap>(ctx, [](duk_context* ctx) {
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->angle();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "angle");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->color();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "color");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->height();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "height");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->id();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "id");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->is_flipped();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "isFlipped");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->is_hidden();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "isHidden");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->is_mirrored();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "isMirrored");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->pivot();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "pivot");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->position();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "position");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->scale();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "scale");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto result = obj->width();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "width");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<Color>(ctx);
                obj->set_color(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setColor");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<int>(ctx);
                obj->set_id(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setId");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<uint32_t>(ctx);
                obj->set_normal(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setNormal");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<Vec2f>(ctx);
                obj->set_pivot(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setPivot");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<Vec2f>(ctx);
                obj->set_position(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setPosition");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<float>(ctx);
                obj->set_rotation(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setRotation");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<Vec2f>(ctx);
                obj->set_scale(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setScale");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<uint32_t>(ctx);
                obj->set_texture(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setTexture");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                obj->flip();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "flip");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                obj->hide();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "hide");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                obj->mirror();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "mirror");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<Vec2f>(ctx);
                obj->move(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "move");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                auto args = duk::get_args<float>(ctx);
                obj->rotate(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "rotate");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteRef>(ctx);
                obj->show();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "show");
        duk::push_literal(ctx, "Rainbow.Sprite");
        duk::put_prop_literal(ctx, -2, DUKR_WELLKNOWN_SYMBOL_TOSTRINGTAG);
    });
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "Sprite");
}

template <>
void rainbow::duk::register_module<rainbow::SpriteBatch>(duk_context* ctx, duk_idx_t rainbow)
{
    duk::push_constructor<SpriteBatch, uint32_t>(ctx);
    duk::put_prototype<SpriteBatch, Allocation::HeapAllocated>(ctx, [](duk_context* ctx) {
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto result = obj->is_visible();
                duk::push(ctx, result);
                return 1;
            },
            0);
        duk::put_prop_literal(ctx, -2, "isVisible");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto args = duk::get_args<SharedPtr<TextureAtlas>>(ctx);
                obj->set_normal(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setNormal");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto args = duk::get_args<SharedPtr<TextureAtlas>>(ctx);
                obj->set_texture(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setTexture");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto args = duk::get_args<bool>(ctx);
                obj->set_visible(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "setVisible");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                obj->clear();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "clear");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto args = duk::get_args<uint32_t, uint32_t>(ctx);
                auto result = obj->create_sprite(duk::forward(std::get<0>(args)), duk::forward(std::get<1>(args)));
                duk::push(ctx, result);
                return 1;
            },
            2);
        duk::put_prop_literal(ctx, -2, "createSprite");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto args = duk::get_args<uint32_t>(ctx);
                obj->erase(duk::forward(std::get<0>(args)));
                return 0;
            },
            1);
        duk::put_prop_literal(ctx, -2, "erase");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto args = duk::get_args<int>(ctx);
                auto result = obj->find_sprite_by_id(duk::forward(std::get<0>(args)));
                duk::push(ctx, result);
                return 1;
            },
            1);
        duk::put_prop_literal(ctx, -2, "findSpriteById");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SpriteBatch>(ctx);
                auto args = duk::get_args<SpriteRef, SpriteRef>(ctx);
                obj->swap(duk::forward(std::get<0>(args)), duk::forward(std::get<1>(args)));
                return 0;
            },
            2);
        duk::put_prop_literal(ctx, -2, "swap");
        duk::push_literal(ctx, "Rainbow.SpriteBatch");
        duk::put_prop_literal(ctx, -2, DUKR_WELLKNOWN_SYMBOL_TOSTRINGTAG);
    });
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "SpriteBatch");
}

template <>
void rainbow::duk::register_module<rainbow::TextAlignment>(duk_context* ctx, duk_idx_t rainbow)
{
    const auto obj_idx = duk_push_bare_object(ctx);
    duk_push_int(ctx, static_cast<int>(TextAlignment::Left));
    duk::put_prop_literal(ctx, obj_idx, "Left");
    duk_push_int(ctx, static_cast<int>(TextAlignment::Right));
    duk::put_prop_literal(ctx, obj_idx, "Right");
    duk_push_int(ctx, static_cast<int>(TextAlignment::Center));
    duk::put_prop_literal(ctx, obj_idx, "Center");
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "TextAlignment");
}

template <>
void rainbow::duk::register_module<rainbow::SharedPtr<rainbow::TextureAtlas>>(duk_context* ctx, duk_idx_t rainbow)
{
    duk::push_constructor<SharedPtr<rainbow::TextureAtlas>, czstring>(ctx);
    duk::put_prototype<SharedPtr<rainbow::TextureAtlas>, Allocation::HeapAllocated>(ctx, [](duk_context* ctx) {
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SharedPtr<rainbow::TextureAtlas>>(ctx);
                auto args = duk::get_args<int, int, int, int>(ctx);
                auto result = obj->add_region(duk::forward(std::get<0>(args)), duk::forward(std::get<1>(args)), duk::forward(std::get<2>(args)), duk::forward(std::get<3>(args)));
                duk::push(ctx, result);
                return 1;
            },
            4);
        duk::put_prop_literal(ctx, -2, "addRegion");
        duk_push_c_function(
            ctx,
            [](duk_context* ctx) -> duk_ret_t {
                auto obj = duk::push_this<SharedPtr<rainbow::TextureAtlas>>(ctx);
                obj->trim();
                return 0;
            },
            0);
        duk::put_prop_literal(ctx, -2, "trim");
        duk::push_literal(ctx, "Rainbow.Texture");
        duk::put_prop_literal(ctx, -2, DUKR_WELLKNOWN_SYMBOL_TOSTRINGTAG);
    });
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "Texture");
}

template <>
void rainbow::duk::register_module<rainbow::VirtualKey>(duk_context* ctx, duk_idx_t rainbow)
{
    const auto obj_idx = duk_push_bare_object(ctx);
    duk_push_int(ctx, static_cast<int>(VirtualKey::Unknown));
    duk::put_prop_literal(ctx, obj_idx, "Unknown");
    duk_push_int(ctx, static_cast<int>(VirtualKey::A));
    duk::put_prop_literal(ctx, obj_idx, "A");
    duk_push_int(ctx, static_cast<int>(VirtualKey::B));
    duk::put_prop_literal(ctx, obj_idx, "B");
    duk_push_int(ctx, static_cast<int>(VirtualKey::C));
    duk::put_prop_literal(ctx, obj_idx, "C");
    duk_push_int(ctx, static_cast<int>(VirtualKey::D));
    duk::put_prop_literal(ctx, obj_idx, "D");
    duk_push_int(ctx, static_cast<int>(VirtualKey::E));
    duk::put_prop_literal(ctx, obj_idx, "E");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F));
    duk::put_prop_literal(ctx, obj_idx, "F");
    duk_push_int(ctx, static_cast<int>(VirtualKey::G));
    duk::put_prop_literal(ctx, obj_idx, "G");
    duk_push_int(ctx, static_cast<int>(VirtualKey::H));
    duk::put_prop_literal(ctx, obj_idx, "H");
    duk_push_int(ctx, static_cast<int>(VirtualKey::I));
    duk::put_prop_literal(ctx, obj_idx, "I");
    duk_push_int(ctx, static_cast<int>(VirtualKey::J));
    duk::put_prop_literal(ctx, obj_idx, "J");
    duk_push_int(ctx, static_cast<int>(VirtualKey::K));
    duk::put_prop_literal(ctx, obj_idx, "K");
    duk_push_int(ctx, static_cast<int>(VirtualKey::L));
    duk::put_prop_literal(ctx, obj_idx, "L");
    duk_push_int(ctx, static_cast<int>(VirtualKey::M));
    duk::put_prop_literal(ctx, obj_idx, "M");
    duk_push_int(ctx, static_cast<int>(VirtualKey::N));
    duk::put_prop_literal(ctx, obj_idx, "N");
    duk_push_int(ctx, static_cast<int>(VirtualKey::O));
    duk::put_prop_literal(ctx, obj_idx, "O");
    duk_push_int(ctx, static_cast<int>(VirtualKey::P));
    duk::put_prop_literal(ctx, obj_idx, "P");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Q));
    duk::put_prop_literal(ctx, obj_idx, "Q");
    duk_push_int(ctx, static_cast<int>(VirtualKey::R));
    duk::put_prop_literal(ctx, obj_idx, "R");
    duk_push_int(ctx, static_cast<int>(VirtualKey::S));
    duk::put_prop_literal(ctx, obj_idx, "S");
    duk_push_int(ctx, static_cast<int>(VirtualKey::T));
    duk::put_prop_literal(ctx, obj_idx, "T");
    duk_push_int(ctx, static_cast<int>(VirtualKey::U));
    duk::put_prop_literal(ctx, obj_idx, "U");
    duk_push_int(ctx, static_cast<int>(VirtualKey::V));
    duk::put_prop_literal(ctx, obj_idx, "V");
    duk_push_int(ctx, static_cast<int>(VirtualKey::W));
    duk::put_prop_literal(ctx, obj_idx, "W");
    duk_push_int(ctx, static_cast<int>(VirtualKey::X));
    duk::put_prop_literal(ctx, obj_idx, "X");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Y));
    duk::put_prop_literal(ctx, obj_idx, "Y");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Z));
    duk::put_prop_literal(ctx, obj_idx, "Z");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number1));
    duk::put_prop_literal(ctx, obj_idx, "Number1");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number2));
    duk::put_prop_literal(ctx, obj_idx, "Number2");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number3));
    duk::put_prop_literal(ctx, obj_idx, "Number3");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number4));
    duk::put_prop_literal(ctx, obj_idx, "Number4");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number5));
    duk::put_prop_literal(ctx, obj_idx, "Number5");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number6));
    duk::put_prop_literal(ctx, obj_idx, "Number6");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number7));
    duk::put_prop_literal(ctx, obj_idx, "Number7");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number8));
    duk::put_prop_literal(ctx, obj_idx, "Number8");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number9));
    duk::put_prop_literal(ctx, obj_idx, "Number9");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Number0));
    duk::put_prop_literal(ctx, obj_idx, "Number0");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Return));
    duk::put_prop_literal(ctx, obj_idx, "Return");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Escape));
    duk::put_prop_literal(ctx, obj_idx, "Escape");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Backspace));
    duk::put_prop_literal(ctx, obj_idx, "Backspace");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Tab));
    duk::put_prop_literal(ctx, obj_idx, "Tab");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Space));
    duk::put_prop_literal(ctx, obj_idx, "Space");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Minus));
    duk::put_prop_literal(ctx, obj_idx, "Minus");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Equals));
    duk::put_prop_literal(ctx, obj_idx, "Equals");
    duk_push_int(ctx, static_cast<int>(VirtualKey::LeftBracket));
    duk::put_prop_literal(ctx, obj_idx, "LeftBracket");
    duk_push_int(ctx, static_cast<int>(VirtualKey::RightBracket));
    duk::put_prop_literal(ctx, obj_idx, "RightBracket");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Backslash));
    duk::put_prop_literal(ctx, obj_idx, "Backslash");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Semicolon));
    duk::put_prop_literal(ctx, obj_idx, "Semicolon");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Apostrophe));
    duk::put_prop_literal(ctx, obj_idx, "Apostrophe");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Grave));
    duk::put_prop_literal(ctx, obj_idx, "Grave");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Comma));
    duk::put_prop_literal(ctx, obj_idx, "Comma");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Period));
    duk::put_prop_literal(ctx, obj_idx, "Period");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Slash));
    duk::put_prop_literal(ctx, obj_idx, "Slash");
    duk_push_int(ctx, static_cast<int>(VirtualKey::CapsLock));
    duk::put_prop_literal(ctx, obj_idx, "CapsLock");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F1));
    duk::put_prop_literal(ctx, obj_idx, "F1");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F2));
    duk::put_prop_literal(ctx, obj_idx, "F2");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F3));
    duk::put_prop_literal(ctx, obj_idx, "F3");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F4));
    duk::put_prop_literal(ctx, obj_idx, "F4");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F5));
    duk::put_prop_literal(ctx, obj_idx, "F5");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F6));
    duk::put_prop_literal(ctx, obj_idx, "F6");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F7));
    duk::put_prop_literal(ctx, obj_idx, "F7");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F8));
    duk::put_prop_literal(ctx, obj_idx, "F8");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F9));
    duk::put_prop_literal(ctx, obj_idx, "F9");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F10));
    duk::put_prop_literal(ctx, obj_idx, "F10");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F11));
    duk::put_prop_literal(ctx, obj_idx, "F11");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F12));
    duk::put_prop_literal(ctx, obj_idx, "F12");
    duk_push_int(ctx, static_cast<int>(VirtualKey::PrintScreen));
    duk::put_prop_literal(ctx, obj_idx, "PrintScreen");
    duk_push_int(ctx, static_cast<int>(VirtualKey::ScrollLock));
    duk::put_prop_literal(ctx, obj_idx, "ScrollLock");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Pause));
    duk::put_prop_literal(ctx, obj_idx, "Pause");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Insert));
    duk::put_prop_literal(ctx, obj_idx, "Insert");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Home));
    duk::put_prop_literal(ctx, obj_idx, "Home");
    duk_push_int(ctx, static_cast<int>(VirtualKey::PageUp));
    duk::put_prop_literal(ctx, obj_idx, "PageUp");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Delete));
    duk::put_prop_literal(ctx, obj_idx, "Delete");
    duk_push_int(ctx, static_cast<int>(VirtualKey::End));
    duk::put_prop_literal(ctx, obj_idx, "End");
    duk_push_int(ctx, static_cast<int>(VirtualKey::PageDown));
    duk::put_prop_literal(ctx, obj_idx, "PageDown");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Right));
    duk::put_prop_literal(ctx, obj_idx, "Right");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Left));
    duk::put_prop_literal(ctx, obj_idx, "Left");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Down));
    duk::put_prop_literal(ctx, obj_idx, "Down");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Up));
    duk::put_prop_literal(ctx, obj_idx, "Up");
    duk_push_int(ctx, static_cast<int>(VirtualKey::NumLock));
    duk::put_prop_literal(ctx, obj_idx, "NumLock");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_Divide));
    duk::put_prop_literal(ctx, obj_idx, "KP_Divide");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_Multiply));
    duk::put_prop_literal(ctx, obj_idx, "KP_Multiply");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_Minus));
    duk::put_prop_literal(ctx, obj_idx, "KP_Minus");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_Plus));
    duk::put_prop_literal(ctx, obj_idx, "KP_Plus");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_Enter));
    duk::put_prop_literal(ctx, obj_idx, "KP_Enter");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_1));
    duk::put_prop_literal(ctx, obj_idx, "KP_1");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_2));
    duk::put_prop_literal(ctx, obj_idx, "KP_2");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_3));
    duk::put_prop_literal(ctx, obj_idx, "KP_3");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_4));
    duk::put_prop_literal(ctx, obj_idx, "KP_4");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_5));
    duk::put_prop_literal(ctx, obj_idx, "KP_5");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_6));
    duk::put_prop_literal(ctx, obj_idx, "KP_6");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_7));
    duk::put_prop_literal(ctx, obj_idx, "KP_7");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_8));
    duk::put_prop_literal(ctx, obj_idx, "KP_8");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_9));
    duk::put_prop_literal(ctx, obj_idx, "KP_9");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_0));
    duk::put_prop_literal(ctx, obj_idx, "KP_0");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_Period));
    duk::put_prop_literal(ctx, obj_idx, "KP_Period");
    duk_push_int(ctx, static_cast<int>(VirtualKey::LessThan));
    duk::put_prop_literal(ctx, obj_idx, "LessThan");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Application));
    duk::put_prop_literal(ctx, obj_idx, "Application");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Power));
    duk::put_prop_literal(ctx, obj_idx, "Power");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KP_Equals));
    duk::put_prop_literal(ctx, obj_idx, "KP_Equals");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F13));
    duk::put_prop_literal(ctx, obj_idx, "F13");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F14));
    duk::put_prop_literal(ctx, obj_idx, "F14");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F15));
    duk::put_prop_literal(ctx, obj_idx, "F15");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F16));
    duk::put_prop_literal(ctx, obj_idx, "F16");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F17));
    duk::put_prop_literal(ctx, obj_idx, "F17");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F18));
    duk::put_prop_literal(ctx, obj_idx, "F18");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F19));
    duk::put_prop_literal(ctx, obj_idx, "F19");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F20));
    duk::put_prop_literal(ctx, obj_idx, "F20");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F21));
    duk::put_prop_literal(ctx, obj_idx, "F21");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F22));
    duk::put_prop_literal(ctx, obj_idx, "F22");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F23));
    duk::put_prop_literal(ctx, obj_idx, "F23");
    duk_push_int(ctx, static_cast<int>(VirtualKey::F24));
    duk::put_prop_literal(ctx, obj_idx, "F24");
    duk_push_int(ctx, static_cast<int>(VirtualKey::LeftCtrl));
    duk::put_prop_literal(ctx, obj_idx, "LeftCtrl");
    duk_push_int(ctx, static_cast<int>(VirtualKey::LeftShift));
    duk::put_prop_literal(ctx, obj_idx, "LeftShift");
    duk_push_int(ctx, static_cast<int>(VirtualKey::LeftAlt));
    duk::put_prop_literal(ctx, obj_idx, "LeftAlt");
    duk_push_int(ctx, static_cast<int>(VirtualKey::LeftSuper));
    duk::put_prop_literal(ctx, obj_idx, "LeftSuper");
    duk_push_int(ctx, static_cast<int>(VirtualKey::RightCtrl));
    duk::put_prop_literal(ctx, obj_idx, "RightCtrl");
    duk_push_int(ctx, static_cast<int>(VirtualKey::RightShift));
    duk::put_prop_literal(ctx, obj_idx, "RightShift");
    duk_push_int(ctx, static_cast<int>(VirtualKey::RightAlt));
    duk::put_prop_literal(ctx, obj_idx, "RightAlt");
    duk_push_int(ctx, static_cast<int>(VirtualKey::RightSuper));
    duk::put_prop_literal(ctx, obj_idx, "RightSuper");
    duk_push_int(ctx, static_cast<int>(VirtualKey::Mode));
    duk::put_prop_literal(ctx, obj_idx, "Mode");
    duk_push_int(ctx, static_cast<int>(VirtualKey::KeyCount));
    duk::put_prop_literal(ctx, obj_idx, "KeyCount");
    duk_freeze(ctx, -1);
    duk::put_prop_literal(ctx, rainbow, "VirtualKey");
}

#ifdef __GNUC__
#   pragma GCC diagnostic pop
#endif

namespace rainbow::duk
{
    void register_all_modules(duk_context* ctx, duk_idx_t obj_idx)
    {
        duk::register_module<Animation>(ctx, obj_idx);
        duk::register_module<AnimationEvent>(ctx, obj_idx);
        duk::register_module<ControllerAxis>(ctx, obj_idx);
        duk::register_module<ControllerButton>(ctx, obj_idx);
        duk::register_module<SharedPtr<FontAtlas>>(ctx, obj_idx);
        duk::register_module<Label>(ctx, obj_idx);
        duk::register_module<SpriteRef>(ctx, obj_idx);
        duk::register_module<SpriteBatch>(ctx, obj_idx);
        duk::register_module<TextAlignment>(ctx, obj_idx);
        duk::register_module<SharedPtr<TextureAtlas>>(ctx, obj_idx);
        duk::register_module<VirtualKey>(ctx, obj_idx);
    }
}

#endif
