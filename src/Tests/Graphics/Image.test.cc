// Copyright (c) 2010-present Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

#include "Graphics/Image.h"

#include <gtest/gtest.h>

#include "Common/Algorithm.h"
#include "Common/Data.h"
#include "Graphics/OpenGL.h"
#include "Resources/Rainbow.svg.h"

using namespace rainbow;

#ifdef GL_EXT_texture_compression_s3tc
TEST(ImageTest, LoadsDDSs_BC1)
{
    constexpr uint8_t kbasn6a08_bc1_dds[640]{
        68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  10,  0,   32,  0,
        0,   0,   32,  0,   0,   0,   0,   2,   0,   0,   1,   0,   0,   0,
        1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   32,  0,   0,   0,   4,   0,   0,   0,
        68,  88,  84,  49,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   255, 255, 255, 255, 255, 255, 0,   0,   255, 255,
        255, 255, 255, 255, 0,   0,   255, 255, 255, 255, 255, 255, 0,   0,
        255, 255, 255, 255, 255, 255, 225, 250, 1,   248, 85,  255, 170, 0,
        225, 250, 1,   248, 85,  255, 170, 0,   225, 250, 1,   248, 85,  255,
        170, 0,   225, 250, 1,   248, 85,  255, 170, 0,   0,   0,   255, 255,
        255, 255, 255, 255, 0,   0,   255, 255, 255, 255, 255, 255, 0,   0,
        255, 255, 255, 255, 255, 255, 0,   0,   255, 255, 255, 255, 255, 255,
        225, 254, 225, 251, 85,  255, 170, 0,   225, 254, 225, 251, 85,  255,
        170, 0,   225, 254, 225, 251, 85,  255, 170, 0,   225, 254, 225, 251,
        85,  255, 170, 0,   0,   0,   255, 255, 255, 255, 255, 255, 0,   0,
        255, 255, 255, 255, 255, 255, 0,   0,   255, 255, 255, 255, 255, 255,
        0,   0,   255, 255, 255, 255, 255, 255, 225, 255, 225, 159, 0,   170,
        255, 85,  225, 255, 225, 159, 0,   170, 255, 85,  225, 255, 225, 159,
        0,   170, 255, 85,  225, 255, 225, 159, 0,   170, 255, 85,  0,   0,
        255, 255, 255, 255, 255, 255, 0,   0,   255, 255, 255, 255, 255, 255,
        0,   0,   255, 255, 255, 255, 255, 255, 0,   0,   255, 255, 255, 255,
        255, 255, 225, 135, 224, 39,  0,   170, 255, 85,  225, 135, 224, 39,
        0,   170, 255, 85,  225, 135, 224, 39,  0,   170, 255, 85,  225, 135,
        224, 39,  0,   170, 255, 85,  0,   0,   255, 255, 255, 255, 255, 255,
        0,   0,   255, 255, 255, 255, 255, 255, 0,   0,   255, 255, 255, 255,
        255, 255, 0,   0,   255, 255, 255, 255, 255, 255, 236, 7,   224, 7,
        85,  255, 170, 0,   236, 7,   224, 7,   85,  255, 170, 0,   236, 7,
        224, 7,   85,  255, 170, 0,   236, 7,   224, 7,   85,  255, 170, 0,
        0,   0,   255, 255, 255, 255, 255, 255, 0,   0,   255, 255, 255, 255,
        255, 255, 0,   0,   255, 255, 255, 255, 255, 255, 0,   0,   255, 255,
        255, 255, 255, 255, 251, 7,   239, 7,   85,  255, 170, 0,   251, 7,
        239, 7,   85,  255, 170, 0,   251, 7,   239, 7,   85,  255, 170, 0,
        251, 7,   239, 7,   85,  255, 170, 0,   0,   0,   255, 255, 255, 255,
        255, 255, 0,   0,   255, 255, 255, 255, 255, 255, 0,   0,   255, 255,
        255, 255, 255, 255, 0,   0,   255, 255, 255, 255, 255, 255, 255, 7,
        31,  5,   0,   170, 255, 85,  255, 7,   31,  5,   0,   170, 255, 85,
        255, 7,   31,  5,   0,   170, 255, 85,  255, 7,   31,  5,   0,   170,
        255, 85,  0,   0,   255, 255, 255, 255, 255, 255, 0,   0,   255, 255,
        255, 255, 255, 255, 0,   0,   255, 255, 255, 255, 255, 255, 0,   0,
        255, 255, 255, 255, 255, 255, 31,  4,   31,  1,   0,   170, 255, 85,
        31,  4,   31,  1,   0,   170, 255, 85,  31,  4,   31,  1,   0,   170,
        255, 85,  31,  4,   31,  1,   0,   170, 255, 85,
    };

    auto image = Image::decode(  //
        {kbasn6a08_bc1_dds,
         sizeof(kbasn6a08_bc1_dds),
         Data::Ownership::Reference},
        1.0f);

    ASSERT_EQ(image.format, Image::Format::BC1);
    ASSERT_EQ(image.width, 32u);
    ASSERT_EQ(image.height, 32u);
    ASSERT_EQ(image.depth, 1u);
    ASSERT_EQ(image.channels, 3u);
    ASSERT_EQ(image.size, floor_pow2(sizeof(kbasn6a08_bc1_dds)));
}

TEST(ImageTest, LoadsDDSs_BC2)
{
    constexpr uint8_t kbasn6a08_bc2_dds[1152]{
        68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  10,  0,   32,  0,
        0,   0,   32,  0,   0,   0,   0,   4,   0,   0,   1,   0,   0,   0,
        1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   32,  0,   0,   0,   4,   0,   0,   0,
        68,  88,  84,  51,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   17,  0,   17,  0,   17,  0,   17,  225, 250, 1,   248,
        85,  255, 170, 0,   34,  51,  34,  51,  34,  51,  34,  51,  225, 250,
        1,   248, 85,  255, 170, 0,   68,  85,  68,  85,  68,  85,  68,  85,
        225, 250, 1,   248, 85,  255, 170, 0,   102, 119, 102, 119, 102, 119,
        102, 119, 225, 250, 1,   248, 85,  255, 170, 0,   136, 153, 136, 153,
        136, 153, 136, 153, 225, 250, 1,   248, 85,  255, 170, 0,   170, 187,
        170, 187, 170, 187, 170, 187, 225, 250, 1,   248, 85,  255, 170, 0,
        204, 221, 204, 221, 204, 221, 204, 221, 225, 250, 1,   248, 85,  255,
        170, 0,   238, 254, 238, 254, 238, 254, 238, 254, 225, 250, 1,   248,
        85,  255, 170, 0,   0,   17,  0,   17,  0,   17,  0,   17,  225, 254,
        225, 251, 85,  255, 170, 0,   34,  51,  34,  51,  34,  51,  34,  51,
        225, 254, 225, 251, 85,  255, 170, 0,   68,  85,  68,  85,  68,  85,
        68,  85,  225, 254, 225, 251, 85,  255, 170, 0,   102, 119, 102, 119,
        102, 119, 102, 119, 225, 254, 225, 251, 85,  255, 170, 0,   136, 153,
        136, 153, 136, 153, 136, 153, 225, 254, 225, 251, 85,  255, 170, 0,
        170, 187, 170, 187, 170, 187, 170, 187, 225, 254, 225, 251, 85,  255,
        170, 0,   204, 221, 204, 221, 204, 221, 204, 221, 225, 254, 225, 251,
        85,  255, 170, 0,   238, 254, 238, 254, 238, 254, 238, 254, 225, 254,
        225, 251, 85,  255, 170, 0,   0,   17,  0,   17,  0,   17,  0,   17,
        225, 255, 225, 159, 0,   170, 255, 85,  34,  51,  34,  51,  34,  51,
        34,  51,  225, 255, 225, 159, 0,   170, 255, 85,  68,  85,  68,  85,
        68,  85,  68,  85,  225, 255, 225, 159, 0,   170, 255, 85,  102, 119,
        102, 119, 102, 119, 102, 119, 225, 255, 225, 159, 0,   170, 255, 85,
        136, 153, 136, 153, 136, 153, 136, 153, 225, 255, 225, 159, 0,   170,
        255, 85,  170, 187, 170, 187, 170, 187, 170, 187, 225, 255, 225, 159,
        0,   170, 255, 85,  204, 221, 204, 221, 204, 221, 204, 221, 225, 255,
        225, 159, 0,   170, 255, 85,  238, 254, 238, 254, 238, 254, 238, 254,
        225, 255, 225, 159, 0,   170, 255, 85,  0,   17,  0,   17,  0,   17,
        0,   17,  225, 135, 224, 39,  0,   170, 255, 85,  34,  51,  34,  51,
        34,  51,  34,  51,  225, 135, 224, 39,  0,   170, 255, 85,  68,  85,
        68,  85,  68,  85,  68,  85,  225, 135, 224, 39,  0,   170, 255, 85,
        102, 119, 102, 119, 102, 119, 102, 119, 225, 135, 224, 39,  0,   170,
        255, 85,  136, 153, 136, 153, 136, 153, 136, 153, 225, 135, 224, 39,
        0,   170, 255, 85,  170, 187, 170, 187, 170, 187, 170, 187, 225, 135,
        224, 39,  0,   170, 255, 85,  204, 221, 204, 221, 204, 221, 204, 221,
        225, 135, 224, 39,  0,   170, 255, 85,  238, 254, 238, 254, 238, 254,
        238, 254, 225, 135, 224, 39,  0,   170, 255, 85,  0,   17,  0,   17,
        0,   17,  0,   17,  236, 7,   224, 7,   85,  255, 170, 0,   34,  51,
        34,  51,  34,  51,  34,  51,  236, 7,   224, 7,   85,  255, 170, 0,
        68,  85,  68,  85,  68,  85,  68,  85,  236, 7,   224, 7,   85,  255,
        170, 0,   102, 119, 102, 119, 102, 119, 102, 119, 236, 7,   224, 7,
        85,  255, 170, 0,   136, 153, 136, 153, 136, 153, 136, 153, 236, 7,
        224, 7,   85,  255, 170, 0,   170, 187, 170, 187, 170, 187, 170, 187,
        236, 7,   224, 7,   85,  255, 170, 0,   204, 221, 204, 221, 204, 221,
        204, 221, 236, 7,   224, 7,   85,  255, 170, 0,   238, 254, 238, 254,
        238, 254, 238, 254, 236, 7,   224, 7,   85,  255, 170, 0,   0,   17,
        0,   17,  0,   17,  0,   17,  251, 7,   239, 7,   85,  255, 170, 0,
        34,  51,  34,  51,  34,  51,  34,  51,  251, 7,   239, 7,   85,  255,
        170, 0,   68,  85,  68,  85,  68,  85,  68,  85,  251, 7,   239, 7,
        85,  255, 170, 0,   102, 119, 102, 119, 102, 119, 102, 119, 251, 7,
        239, 7,   85,  255, 170, 0,   136, 153, 136, 153, 136, 153, 136, 153,
        251, 7,   239, 7,   85,  255, 170, 0,   170, 187, 170, 187, 170, 187,
        170, 187, 251, 7,   239, 7,   85,  255, 170, 0,   204, 221, 204, 221,
        204, 221, 204, 221, 251, 7,   239, 7,   85,  255, 170, 0,   238, 254,
        238, 254, 238, 254, 238, 254, 251, 7,   239, 7,   85,  255, 170, 0,
        0,   17,  0,   17,  0,   17,  0,   17,  255, 7,   31,  5,   0,   170,
        255, 85,  34,  51,  34,  51,  34,  51,  34,  51,  255, 7,   31,  5,
        0,   170, 255, 85,  68,  85,  68,  85,  68,  85,  68,  85,  255, 7,
        31,  5,   0,   170, 255, 85,  102, 119, 102, 119, 102, 119, 102, 119,
        255, 7,   31,  5,   0,   170, 255, 85,  136, 153, 136, 153, 136, 153,
        136, 153, 255, 7,   31,  5,   0,   170, 255, 85,  170, 187, 170, 187,
        170, 187, 170, 187, 255, 7,   31,  5,   0,   170, 255, 85,  204, 221,
        204, 221, 204, 221, 204, 221, 255, 7,   31,  5,   0,   170, 255, 85,
        238, 254, 238, 254, 238, 254, 238, 254, 255, 7,   31,  5,   0,   170,
        255, 85,  0,   17,  0,   17,  0,   17,  0,   17,  31,  4,   31,  1,
        0,   170, 255, 85,  34,  51,  34,  51,  34,  51,  34,  51,  31,  4,
        31,  1,   0,   170, 255, 85,  68,  85,  68,  85,  68,  85,  68,  85,
        31,  4,   31,  1,   0,   170, 255, 85,  102, 119, 102, 119, 102, 119,
        102, 119, 31,  4,   31,  1,   0,   170, 255, 85,  136, 153, 136, 153,
        136, 153, 136, 153, 31,  4,   31,  1,   0,   170, 255, 85,  170, 187,
        170, 187, 170, 187, 170, 187, 31,  4,   31,  1,   0,   170, 255, 85,
        204, 221, 204, 221, 204, 221, 204, 221, 31,  4,   31,  1,   0,   170,
        255, 85,  238, 254, 238, 254, 238, 254, 238, 254, 31,  4,   31,  1,
        0,   170, 255, 85,
    };

    auto image = Image::decode(  //
        {kbasn6a08_bc2_dds,
         sizeof(kbasn6a08_bc2_dds),
         Data::Ownership::Reference},
        1.0f);

    ASSERT_EQ(image.format, Image::Format::BC2);
    ASSERT_EQ(image.width, 32u);
    ASSERT_EQ(image.height, 32u);
    ASSERT_EQ(image.depth, 1u);
    ASSERT_EQ(image.channels, 4u);
    ASSERT_EQ(image.size, floor_pow2(sizeof(kbasn6a08_bc2_dds)));
}

TEST(ImageTest, LoadsDDSs_BC3)
{
    constexpr uint8_t kbasn6a08_bc3_dds[1152]{
        68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  10,  0,   32,  0,
        0,   0,   32,  0,   0,   0,   0,   4,   0,   0,   1,   0,   0,   0,
        1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   32,  0,   0,   0,   4,   0,   0,   0,
        68,  88,  84,  53,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   9,   25,  198, 98,  44,  198, 98,  44,  225, 250, 1,   248,
        85,  255, 170, 0,   56,  31,  233, 144, 14,  233, 144, 14,  225, 250,
        1,   248, 85,  255, 170, 0,   89,  64,  233, 144, 14,  233, 144, 14,
        225, 250, 1,   248, 85,  255, 170, 0,   123, 98,  241, 16,  15,  241,
        16,  15,  225, 250, 1,   248, 85,  255, 170, 0,   156, 131, 241, 16,
        15,  241, 16,  15,  225, 250, 1,   248, 85,  255, 170, 0,   190, 165,
        49,  17,  19,  49,  17,  19,  225, 250, 1,   248, 85,  255, 170, 0,
        223, 198, 49,  17,  19,  49,  17,  19,  225, 250, 1,   248, 85,  255,
        170, 0,   229, 245, 96,  14,  230, 96,  14,  230, 225, 250, 1,   248,
        85,  255, 170, 0,   9,   25,  198, 98,  44,  198, 98,  44,  225, 254,
        225, 251, 85,  255, 170, 0,   56,  31,  233, 144, 14,  233, 144, 14,
        225, 254, 225, 251, 85,  255, 170, 0,   89,  64,  233, 144, 14,  233,
        144, 14,  225, 254, 225, 251, 85,  255, 170, 0,   123, 98,  241, 16,
        15,  241, 16,  15,  225, 254, 225, 251, 85,  255, 170, 0,   156, 131,
        241, 16,  15,  241, 16,  15,  225, 254, 225, 251, 85,  255, 170, 0,
        190, 165, 49,  17,  19,  49,  17,  19,  225, 254, 225, 251, 85,  255,
        170, 0,   223, 198, 49,  17,  19,  49,  17,  19,  225, 254, 225, 251,
        85,  255, 170, 0,   229, 245, 96,  14,  230, 96,  14,  230, 225, 254,
        225, 251, 85,  255, 170, 0,   9,   25,  198, 98,  44,  198, 98,  44,
        225, 255, 225, 159, 0,   170, 255, 85,  56,  31,  233, 144, 14,  233,
        144, 14,  225, 255, 225, 159, 0,   170, 255, 85,  89,  64,  233, 144,
        14,  233, 144, 14,  225, 255, 225, 159, 0,   170, 255, 85,  123, 98,
        241, 16,  15,  241, 16,  15,  225, 255, 225, 159, 0,   170, 255, 85,
        156, 131, 241, 16,  15,  241, 16,  15,  225, 255, 225, 159, 0,   170,
        255, 85,  190, 165, 49,  17,  19,  49,  17,  19,  225, 255, 225, 159,
        0,   170, 255, 85,  223, 198, 49,  17,  19,  49,  17,  19,  225, 255,
        225, 159, 0,   170, 255, 85,  229, 245, 96,  14,  230, 96,  14,  230,
        225, 255, 225, 159, 0,   170, 255, 85,  9,   25,  198, 98,  44,  198,
        98,  44,  225, 135, 224, 39,  0,   170, 255, 85,  56,  31,  233, 144,
        14,  233, 144, 14,  225, 135, 224, 39,  0,   170, 255, 85,  89,  64,
        233, 144, 14,  233, 144, 14,  225, 135, 224, 39,  0,   170, 255, 85,
        123, 98,  241, 16,  15,  241, 16,  15,  225, 135, 224, 39,  0,   170,
        255, 85,  156, 131, 241, 16,  15,  241, 16,  15,  225, 135, 224, 39,
        0,   170, 255, 85,  190, 165, 49,  17,  19,  49,  17,  19,  225, 135,
        224, 39,  0,   170, 255, 85,  223, 198, 49,  17,  19,  49,  17,  19,
        225, 135, 224, 39,  0,   170, 255, 85,  229, 245, 96,  14,  230, 96,
        14,  230, 225, 135, 224, 39,  0,   170, 255, 85,  9,   25,  198, 98,
        44,  198, 98,  44,  236, 7,   224, 7,   85,  255, 170, 0,   56,  31,
        233, 144, 14,  233, 144, 14,  236, 7,   224, 7,   85,  255, 170, 0,
        89,  64,  233, 144, 14,  233, 144, 14,  236, 7,   224, 7,   85,  255,
        170, 0,   123, 98,  241, 16,  15,  241, 16,  15,  236, 7,   224, 7,
        85,  255, 170, 0,   156, 131, 241, 16,  15,  241, 16,  15,  236, 7,
        224, 7,   85,  255, 170, 0,   190, 165, 49,  17,  19,  49,  17,  19,
        236, 7,   224, 7,   85,  255, 170, 0,   223, 198, 49,  17,  19,  49,
        17,  19,  236, 7,   224, 7,   85,  255, 170, 0,   229, 245, 96,  14,
        230, 96,  14,  230, 236, 7,   224, 7,   85,  255, 170, 0,   9,   25,
        198, 98,  44,  198, 98,  44,  251, 7,   239, 7,   85,  255, 170, 0,
        56,  31,  233, 144, 14,  233, 144, 14,  251, 7,   239, 7,   85,  255,
        170, 0,   89,  64,  233, 144, 14,  233, 144, 14,  251, 7,   239, 7,
        85,  255, 170, 0,   123, 98,  241, 16,  15,  241, 16,  15,  251, 7,
        239, 7,   85,  255, 170, 0,   156, 131, 241, 16,  15,  241, 16,  15,
        251, 7,   239, 7,   85,  255, 170, 0,   190, 165, 49,  17,  19,  49,
        17,  19,  251, 7,   239, 7,   85,  255, 170, 0,   223, 198, 49,  17,
        19,  49,  17,  19,  251, 7,   239, 7,   85,  255, 170, 0,   229, 245,
        96,  14,  230, 96,  14,  230, 251, 7,   239, 7,   85,  255, 170, 0,
        9,   25,  198, 98,  44,  198, 98,  44,  255, 7,   31,  5,   0,   170,
        255, 85,  56,  31,  233, 144, 14,  233, 144, 14,  255, 7,   31,  5,
        0,   170, 255, 85,  89,  64,  233, 144, 14,  233, 144, 14,  255, 7,
        31,  5,   0,   170, 255, 85,  123, 98,  241, 16,  15,  241, 16,  15,
        255, 7,   31,  5,   0,   170, 255, 85,  156, 131, 241, 16,  15,  241,
        16,  15,  255, 7,   31,  5,   0,   170, 255, 85,  190, 165, 49,  17,
        19,  49,  17,  19,  255, 7,   31,  5,   0,   170, 255, 85,  223, 198,
        49,  17,  19,  49,  17,  19,  255, 7,   31,  5,   0,   170, 255, 85,
        229, 245, 96,  14,  230, 96,  14,  230, 255, 7,   31,  5,   0,   170,
        255, 85,  9,   25,  198, 98,  44,  198, 98,  44,  31,  4,   31,  1,
        0,   170, 255, 85,  56,  31,  233, 144, 14,  233, 144, 14,  31,  4,
        31,  1,   0,   170, 255, 85,  89,  64,  233, 144, 14,  233, 144, 14,
        31,  4,   31,  1,   0,   170, 255, 85,  123, 98,  241, 16,  15,  241,
        16,  15,  31,  4,   31,  1,   0,   170, 255, 85,  156, 131, 241, 16,
        15,  241, 16,  15,  31,  4,   31,  1,   0,   170, 255, 85,  190, 165,
        49,  17,  19,  49,  17,  19,  31,  4,   31,  1,   0,   170, 255, 85,
        223, 198, 49,  17,  19,  49,  17,  19,  31,  4,   31,  1,   0,   170,
        255, 85,  229, 245, 96,  14,  230, 96,  14,  230, 31,  4,   31,  1,
        0,   170, 255, 85,
    };

    auto image = Image::decode(  //
        {kbasn6a08_bc3_dds,
         sizeof(kbasn6a08_bc3_dds),
         Data::Ownership::Reference},
        1.0f);

    ASSERT_EQ(image.format, Image::Format::BC3);
    ASSERT_EQ(image.width, 32u);
    ASSERT_EQ(image.height, 32u);
    ASSERT_EQ(image.depth, 1u);
    ASSERT_EQ(image.channels, 4u);
    ASSERT_EQ(image.size, floor_pow2(sizeof(kbasn6a08_bc3_dds)));
}
#endif

TEST(ImageTest, LoadsPNGs_16BitGrayscale)
{
    constexpr uint8_t kbasn4a08_png[126]{
        137, 80,  78,  71,  13,  10,  26,  10,  0,   0,   0,   13,  73,  72,
        68,  82,  0,   0,   0,   32,  0,   0,   0,   32,  8,   4,   0,   0,
        0,   217, 115, 178, 127, 0,   0,   0,   4,   103, 65,  77,  65,  0,
        1,   134, 160, 49,  232, 150, 95,  0,   0,   0,   53,  73,  68,  65,
        84,  120, 156, 99,  252, 207, 192, 192, 1,   133, 156, 104, 52,  49,
        34,  156, 44,  223, 25,  40,  3,   44,  63,  134, 190, 1,   163, 97,
        48,  26,  6,   84,  49,  96,  52,  16,  71,  195, 128, 42,  6,   140,
        6,   226, 104, 24,  80,  195, 0,   0,   223, 42,  32,  125, 196, 235,
        133, 200, 0,   0,   0,   0,   73,  69,  78,  68,  174, 66,  96,  130,
    };

    auto image = Image::decode(
        {kbasn4a08_png, sizeof(kbasn4a08_png), Data::Ownership::Reference},
        1.0f);

    ASSERT_EQ(image.format, Image::Format::PNG);
    ASSERT_EQ(image.width, 32u);
    ASSERT_EQ(image.height, 32u);
    ASSERT_EQ(image.depth, 16u);
    ASSERT_EQ(image.channels, 2u);
    ASSERT_EQ(image.size, image.width * image.height * 2u);
}

TEST(ImageTest, LoadsPNGs_32BitColor)
{
    constexpr uint8_t kbasn6a08_png[184]{
        137, 80,  78,  71,  13,  10,  26,  10,  0,   0,   0,   13,  73,  72,
        68,  82,  0,   0,   0,   32,  0,   0,   0,   32,  8,   6,   0,   0,
        0,   115, 122, 122, 244, 0,   0,   0,   4,   103, 65,  77,  65,  0,
        1,   134, 160, 49,  232, 150, 95,  0,   0,   0,   111, 73,  68,  65,
        84,  120, 156, 237, 214, 49,  10,  128, 48,  12,  70,  225, 39,  100,
        104, 79,  161, 247, 63,  85,  4,   143, 33,  196, 221, 197, 69,  120,
        29,  82,  232, 80,  40,  252, 31,  77,  40,  217, 138, 1,   48,  94,
        123, 126, 156, 255, 186, 51,  131, 29,  117, 5,   71,  3,   202, 6,
        168, 249, 13,  88,  160, 7,   78,  53,  30,  34,  125, 128, 92,  130,
        84,  227, 27,  176, 66,  15,  92,  220, 46,  0,   121, 32,  136, 146,
        255, 226, 160, 1,   54,  160, 123, 64,  7,   148, 60,  16,  4,   217,
        0,   25,  80,  54,  64,  127, 1,   27,  240, 0,   82,  32,  26,  156,
        22,  15,  184, 76,  0,   0,   0,   0,   73,  69,  78,  68,  174, 66,
        96,  130,
    };

    auto image = Image::decode(
        {kbasn6a08_png, sizeof(kbasn6a08_png), Data::Ownership::Reference},
        1.0f);

    ASSERT_EQ(image.format, Image::Format::PNG);
    ASSERT_EQ(image.width, 32u);
    ASSERT_EQ(image.height, 32u);
    ASSERT_EQ(image.depth, 32u);
    ASSERT_EQ(image.channels, 4u);
    ASSERT_EQ(image.size, image.width * image.height * 4u);
}

TEST(ImageTest, LoadsSVGs)
{
    auto image = Image::decode(
        {assets::kLogo, sizeof(assets::kLogo), Data::Ownership::Reference},
        1.0f);

    ASSERT_EQ(image.format, Image::Format::SVG);
    ASSERT_EQ(image.width, rainbow::ceil_pow2(assets::kLogoWidth));
    ASSERT_EQ(image.height, rainbow::ceil_pow2(assets::kLogoHeight));
    ASSERT_EQ(image.depth, 32u);
    ASSERT_EQ(image.channels, 4u);
    ASSERT_EQ(image.size, image.width * image.height * 4u);
}
