// This file was generated by `generate-shaders.ts`. DO NOT MODIFY!
//
// Copyright (c) 2010-present Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

#include "Graphics/Shaders.h"

namespace gl = rainbow::graphics::gl;

// clang-format off

namespace
{
    constexpr char kDiffuseLight2D_frag[] =
        "uniform float cutoff;\n"
        "uniform float radius;\n"
        "uniform vec3 light;\n"
        "uniform sampler2D texture;\n"
        "varying lowp vec4 v_color;\n"
        "varying vec2 v_texcoord;\n"
        "void main()\n"
        "{\n"
            "vec3 L = light - gl_FragCoord.xyz;\n"
            "float distance = length(L);\n"
            "float d = max(distance - radius, 0.0);\n"
            "L /= distance;\n"
            "float f = d / cutoff;\n"
            "d /= 1.0 - f * f;\n"
            "f = d / radius + 1.0;\n"
            "float attenuation = 1.0 / (f * f);\n"
            "gl_FragColor = texture2D(texture, v_texcoord) * v_color\n"
                         "* max(L.z, 0.0)\n"
                         "* attenuation;\n"
        "}\n";

    constexpr char kDiffuseLightNormal_frag[] =
        "uniform float cutoff;\n"
        "uniform float radius;\n"
        "uniform vec3 light;\n"
        "uniform sampler2D normal;\n"
        "uniform sampler2D texture;\n"
        "varying lowp vec4 v_color;\n"
        "varying vec2 v_normal;\n"
        "varying vec2 v_texcoord;\n"
        "void main()\n"
        "{\n"
            "vec3 L = light - gl_FragCoord.xyz;\n"
            "float distance = length(L);\n"
            "float d = max(distance - radius, 0.0);\n"
            "L /= distance;\n"
            "float f = d / cutoff;\n"
            "d /= 1.0 - f * f;\n"
            "f = d / radius + 1.0;\n"
            "float attenuation = 1.0 / (f * f);\n"
            "gl_FragColor = texture2D(texture, v_texcoord) * v_color\n"
                         "* max(dot(L, texture2D(normal, v_normal).xyz * 2.0 - 1.0), 0.0)\n"
                         "* attenuation;\n"
        "}\n";

    constexpr char kFixed2D_frag[] =
        "uniform sampler2D texture;\n"
        "varying lowp vec4 v_color;\n"
        "varying vec2 v_texcoord;\n"
        "void main()\n"
        "{\n"
            "gl_FragColor = texture2D(texture, v_texcoord) * v_color;\n"
        "}\n";

    constexpr char kFixed2D_vert[] =
        "uniform mat4 mvp_matrix;\n"
        "attribute vec4 color;\n"
        "attribute vec2 texcoord;\n"
        "attribute vec2 vertex;\n"
        "varying lowp vec4 v_color;\n"
        "varying vec2 v_texcoord;\n"
        "void main()\n"
        "{\n"
            "v_color = color;\n"
            "v_texcoord = texcoord;\n"
            "gl_Position = mvp_matrix * vec4(vertex, 0.0, 1.0);\n"
        "}\n";

    constexpr char kGL2_1_header_glsl[] =
        "#version 120\n"
        "#define lowp\n";

    constexpr char kGLES2_header_glsl[] =
        "#version 100\n"
        "#ifdef GL_FRAGMENT_PRECISION_HIGH\n"
        "precision highp float;\n"
        "#else\n"
        "precision mediump float;\n"
        "#endif\n";

    constexpr char kNormalMapped_vert[] =
        "uniform mat4 mvp_matrix;\n"
        "attribute vec4 color;\n"
        "attribute vec2 normal;\n"
        "attribute vec2 texcoord;\n"
        "attribute vec2 vertex;\n"
        "varying lowp vec4 v_color;\n"
        "varying vec2 v_normal;\n"
        "varying vec2 v_texcoord;\n"
        "void main()\n"
        "{\n"
            "v_color = color;\n"
            "v_normal = normal;\n"
            "v_texcoord = texcoord;\n"
            "gl_Position = mvp_matrix * vec4(vertex, 0.0, 1.0);\n"
        "}\n";

    constexpr char kSimple_frag[] =
        "varying lowp vec4 v_color;\n"
        "void main()\n"
        "{\n"
            "gl_FragColor = v_color;\n"
        "}\n";

    constexpr char kSimple2D_vert[] =
        "uniform mat4 mvp_matrix;\n"
        "attribute vec4 color;\n"
        "attribute vec2 vertex;\n"
        "varying lowp vec4 v_color;\n"
        "void main()\n"
        "{\n"
            "v_color = color;\n"
            "gl_Position = mvp_matrix * vec4(vertex, 0.0, 1.0);\n"
        "}\n";
}  // namespace

auto gl::DiffuseLight2D_frag() -> Shader::Params
{
    return {Shader::kTypeFragment, 0, "Shaders/DiffuseLight2D.frag", kDiffuseLight2D_frag};
}

auto gl::DiffuseLightNormal_frag() -> Shader::Params
{
    return {Shader::kTypeFragment, 0, "Shaders/DiffuseLightNormal.frag", kDiffuseLightNormal_frag};
}

auto gl::Fixed2D_frag() -> Shader::Params
{
    return {Shader::kTypeFragment, 0, "Shaders/Fixed2D.frag", kFixed2D_frag};
}

auto gl::Fixed2D_vert() -> Shader::Params
{
    return {Shader::kTypeVertex, 0, "Shaders/Fixed2D.vert", kFixed2D_vert};
}

auto gl::GL2_1_header_glsl() -> rainbow::czstring
{
    return kGL2_1_header_glsl;
}

auto gl::GLES2_header_glsl() -> rainbow::czstring
{
    return kGLES2_header_glsl;
}

auto gl::NormalMapped_vert() -> Shader::Params
{
    return {Shader::kTypeVertex, 0, "Shaders/NormalMapped.vert", kNormalMapped_vert};
}

auto gl::Simple_frag() -> Shader::Params
{
    return {Shader::kTypeFragment, 0, "Shaders/Simple.frag", kSimple_frag};
}

auto gl::Simple2D_vert() -> Shader::Params
{
    return {Shader::kTypeVertex, 0, "Shaders/Simple2D.vert", kSimple2D_vert};
}

// clang-format on
