if(EMSCRIPTEN)
  find_package(OpenAL REQUIRED)
  target_link_libraries(rainbow ${OPENAL_LIBRARY})
elseif(USE_FMOD_STUDIO)
  set(AUDIO_INCLUDE_DIRS ${LOCAL_LIBRARY}/FMOD/inc)
  if(WIN32)
    set(FMOD_ARCH windows)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
      set(FMOD_LIBRARY_SUFFIX 64_vc.lib)
    else()
      set(FMOD_LIBRARY_SUFFIX _vc.lib)
    endif()
  else()
    if(ANDROID)
      set(FMOD_ARCH android/${ANDROID_ABI})
    elseif(APPLE)
      set(FMOD_ARCH mac)
    else()
      if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(FMOD_ARCH linux/x86_64)
      else()
        set(FMOD_ARCH linux/x86)
      endif()
    endif()
    set(FMOD_LIBRARY_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})
  endif()
  set(FMOD_LIBRARY_PREFIX ${LOCAL_LIBRARY}/FMOD/lib/${FMOD_ARCH}/${CMAKE_SHARED_LIBRARY_PREFIX})
  add_library(fmod SHARED IMPORTED)
  set_target_properties(fmod PROPERTIES IMPORTED_LOCATION ${FMOD_LIBRARY_PREFIX}fmod${FMOD_LIBRARY_SUFFIX})
  add_library(fmodstudio SHARED IMPORTED)
  set_target_properties(fmodstudio PROPERTIES IMPORTED_LOCATION ${FMOD_LIBRARY_PREFIX}fmodstudio${FMOD_LIBRARY_SUFFIX})
  set(AUDIO_LIBRARIES fmod fmodstudio)
  message(STATUS "Found FMOD Studio: ${AUDIO_LIBRARIES}")
else()
  if(WIN32)
    download_library(
        openal-soft
        http://kcat.strangesoft.net/openal-binaries/openal-soft-1.18.2-bin.zip
        893ba969cb0f883be66782320781a8f077e1edf5ed3701bd3fe15f59066d94af
    )
    ExternalProject_Get_Property(openal-soft SOURCE_DIR)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
      set(OPENAL_ARCH Win64)
    else()
      set(OPENAL_ARCH Win32)
    endif()
    copy_to_build_dir(openal-soft bin/${OPENAL_ARCH}/soft_oal.dll OpenAL32.dll)
    target_include_directories(rainbow PRIVATE ${SOURCE_DIR}/include)
    target_link_libraries(rainbow ${SOURCE_DIR}/libs/${OPENAL_ARCH}/libOpenAL32.dll.a)
    message(STATUS "Found OpenAL: ${SOURCE_DIR}/libs/${OPENAL_ARCH}/libOpenAL32.dll.a")

    execute_process(COMMAND ${VCPKG_PATH}/vcpkg.exe install
        libogg:${VCPKG_TARGET_TRIPLET}
        libvorbis:${VCPKG_TARGET_TRIPLET}
    )

    find_path(VORBIS_INCLUDE_DIR vorbis/vorbisfile.h)
    target_include_directories(rainbow PRIVATE ${VORBIS_INCLUDE_DIR})

    find_library(OGG_LIBRARY ogg)
    find_library(VORBIS_LIBRARY vorbis)
    find_library(VORBISFILE_LIBRARY vorbisfile)
    target_link_libraries(rainbow ${VORBISFILE_LIBRARY} ${VORBIS_LIBRARY} ${OGG_LIBRARY})
  else()
    find_package(OpenAL REQUIRED)
    pkg_check_modules(VORBIS REQUIRED ogg vorbis vorbisfile)
    target_include_directories(rainbow PRIVATE ${OPENAL_INCLUDE_DIR} ${VORBIS_INCLUDE_DIRS})
    target_link_libraries(rainbow ${VORBIS_LDFLAGS} ${OPENAL_LIBRARY})
    if(APPLE)
      find_library(AUDIOTOOLBOX_LIBRARY AudioToolbox REQUIRED)
      target_link_libraries(rainbow ${AUDIOTOOLBOX_LIBRARY})
    endif()
  endif()
endif()
